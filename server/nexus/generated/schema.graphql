### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
Объект ответа мутации пользователя
"""
type AuthPayload {
  data: User
  errors: [RequestError!]!
  message: String
  success: Boolean!
  token: String
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

scalar JSON

type Mutation {
  """
  Создать хранилище
  """
  createStore(data: StoreCreateInput!): StorePayload!

  """
  Авторизация
  """
  signin(data: UserSigninDataInput!, where: UserWhereUniqueInput!): AuthPayload!

  """
  Регистрация
  """
  signup(data: UserSignupDataInput!): AuthPayload!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  me: User

  """
  Список хранилищь
  """
  stores(
    cursor: StoreWhereUniqueInput
    orderBy: [StoreOrderByInput!]
    skip: Int
    take: Int
    where: StoreWhereInput
  ): [Store!]!

  """
  Список пользователей
  """
  users(
    cursor: UserWhereUniqueInput
    orderBy: [UserOrderByInput!]
    skip: Int
    take: Int
    where: UserWhereInput
  ): [User!]!
}

"""
Объект ошибки
"""
type RequestError {
  key: String!
  message: String!
}

enum SortOrder {
  asc
  desc
}

"""
Хранилище
"""
type Store {
  """
  Когда создан
  """
  createdAt: DateTime!
  id: String!
  name: String

  """
  Когда обновлен
  """
  updatedAt: DateTime!
}

input StoreCreateInput {
  name: String!
}

input StoreListRelationFilter {
  every: StoreWhereInput
  none: StoreWhereInput
  some: StoreWhereInput
}

input StoreOrderByInput {
  createdAt: SortOrder
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

"""
Объект ответа мутации пользователя
"""
type StorePayload {
  data: Store
  errors: [RequestError!]!
  message: String
  success: Boolean!
}

input StoreWhereInput {
  AND: [StoreWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [StoreWhereInput!]
  OR: [StoreWhereInput!]
  createdAt: DateTimeFilter
  createdById: StringFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input StoreWhereUniqueInput {
  id: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input TokenListRelationFilter {
  every: TokenWhereInput
  none: TokenWhereInput
  some: TokenWhereInput
}

input TokenWhereInput {
  AND: [TokenWhereInput!]
  NOT: [TokenWhereInput!]
  OR: [TokenWhereInput!]
  User: UserWhereInput
  createdAt: DateTimeFilter
  expiredAt: DateTimeNullableFilter
  id: StringFilter
  userId: StringFilter
}

"""
Пользователь
"""
type User {
  """
  Когда создан
  """
  createdAt: DateTime!
  email: String
  fullname: String
  id: String!

  """
  Показывать емейл другим пользователям
  """
  showEmail: Boolean!

  """
  Показывать ФИО другим пользователям
  """
  showFullname: Boolean!
  sudo: Boolean

  """
  Когда обновлен
  """
  updatedAt: DateTime!
  username: String
}

input UserOrderByInput {
  active: SortOrder
  createdAt: SortOrder
  email: SortOrder
  fullname: SortOrder
  id: SortOrder
  password: SortOrder
  showEmail: SortOrder
  showFullname: SortOrder
  sudo: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserSigninDataInput {
  password: String!
}

input UserSignupDataInput {
  email: String!
  fullname: String
  password: String!

  """
  Показывать емейл другим пользователям
  """
  showEmail: Boolean!

  """
  Показывать ФИО другим пользователям
  """
  showFullname: Boolean!
  username: String!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  Stores: StoreListRelationFilter
  Tokens: TokenListRelationFilter
  active: BoolFilter
  createdAt: DateTimeFilter
  email: StringFilter
  fullname: StringNullableFilter
  id: StringFilter
  password: StringFilter
  showEmail: BoolFilter
  showFullname: BoolFilter
  sudo: BoolFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}
